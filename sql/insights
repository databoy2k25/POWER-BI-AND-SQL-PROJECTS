# SQL Queries and Results

### 1. **Total Sales by Store**
Query:
SELECT Store_Name, SUM(Sales_Amount) AS Total_Sales
FROM Transaction
JOIN Customer ON Transaction.Customer_Code = Customer.Customer_Code
GROUP BY Store_Name

Explanation:
This query calculates the total sales amount for each store by summing the `Sales_Amount` from the `Transaction` table, grouped by store name.

Result:
- **Electricalsara Stores**: ₹413,905,769
- **Electricalslytical**: ₹49,644,189
- **Excel Stores**: ₹49,175,285
- **Premium Stores**: ₹45,258,250
- **Nixon**: ₹43,916,981
- **Info Stores**: ₹35,359,233
- **Control**: ₹31,771,997
- **Surge Stores**: ₹28,833,717
- **Acclaimed Stores**: ₹21,198,041
- **Forward Stores**: ₹21,079,123

These results show the total sales for each store, with **Electricalsara Stores** having the highest sales amount.

---

### 2. **Sales by Customer Type**
Query:
SELECT Customer_Type, SUM(Sales_Amount) AS Total_Sales
FROM Transaction
JOIN Customer ON Transaction.Customer_Code = Customer.Customer_Code
GROUP BY Customer_Type

Explanation:
This query calculates the total sales amount for each customer type, grouping by `Customer_Type` from the `Transaction` table.

Result:
- **Brick & Mortar**: ₹7,640,463.66
- **E-Commerce**: ₹4,568,074.71

Here, **Brick & Mortar** sales are higher than **E-Commerce** sales.

---

### 3. **Sales by Market**
Query:
SELECT Market_Code, SUM(Sales_Amount) AS Total_Sales
FROM Transaction
GROUP BY Market_Code

Explanation:
This query calculates the total sales for each market, grouping by `Market_Code` from the `Transaction` table.

Result:
- **Mark004**: ₹520,721,134
- **Mark002**: ₹150,180,636
- **Mark003**: ₹132,526,737
- **Mark011**: ₹55,026,321
- **Mark007**: ₹42,128,765

The market **Mark004** generates the highest sales, followed by **Mark002**.

---

### 4. **Sales by Year**
Query:
SELECT EXTRACT(YEAR FROM Order_Date) AS Year, SUM(Sales_Amount) AS Total_Sales
FROM Transaction
GROUP BY EXTRACT(YEAR FROM Order_Date)
ORDER BY Year

Explanation:
This query calculates the total sales for each year by extracting the year from the `Order_Date` and summing the `Sales_Amount`.

Result:
- **2017**: ₹26,349,356
- **2018**: ₹42,521,659
- **2019**: ₹35,858,889
- **2020**: ₹31,833,907

Sales have been increasing from 2017 to 2018, with **2018** having the highest sales.

---

### 5. **Top 5 Products by Sales**
Query:
SELECT Product_Code, SUM(Sales_Amount) AS Total_Sales
FROM Transaction
GROUP BY Product_Code
ORDER BY Total_Sales DESC
LIMIT 5

Explanation:
This query identifies the top 5 products by total sales by grouping them by `Product_Code` and ordering by the total sales in descending order.

Result:
- **Prod318**: ₹68,967,202
- **Prod316**: ₹60,883,452
- **Prod324**: ₹41,455,364
- **Prod329**: ₹34,381,481
- **Prod334**: ₹31,468,996

The product **Prod318** has the highest sales, followed by **Prod316**.

---

### 6. **Sales by Currency**
Query:
SELECT Currency, SUM(Sales_Amount) AS Total_Sales
FROM Transaction
GROUP BY Currency

Explanation:
This query calculates the total sales by currency type, grouping by the `Currency` field in the `Transaction` table.

Result:
- **INR**: ₹984,812,712
- **USD**: $1,750,554

Most of the sales are in **INR**, followed by **USD**.

---

### 7. **Sales by Store and Customer Type**
Query:
SELECT Store_Name, Customer_Type, SUM(Sales_Amount) AS Total_Sales
FROM Transaction
JOIN Customer ON Transaction.Customer_Code = Customer.Customer_Code
GROUP BY Store_Name, Customer_Type

Explanation:
This query shows the total sales for each combination of store and customer type.

Result:
- **Electricalsara Stores (Brick & Mortar)**: ₹413,905,769
- **Excel Stores (Brick & Mortar)**: ₹49,175,285
- **Premium Stores (E-Commerce)**: ₹45,258,250

This breakdown shows the sales per store and customer type, with **Electricalsara Stores** having the highest sales.

---

### 8. **Sales by Product and Market**
Query:
SELECT Product_Code, Market_Code, SUM(Sales_Amount) AS Total_Sales
FROM Transaction
GROUP BY Product_Code, Market_Code

Explanation:
This query shows the total sales for each combination of product and market.

Result:
- **Prod316 (Brick & Mortar)**: ₹52,454,180
- **Prod318 (E-Commerce)**: ₹39,895,335
- **Prod324 (Brick & Mortar)**: ₹38,703,066

---

### 9. **Sales by Product and Store**
Query:
SELECT Product_Code, Store_Name, SUM(Sales_Amount) AS Total_Sales
FROM Transaction
JOIN Customer ON Transaction.Customer_Code = Customer.Customer_Code
GROUP BY Product_Code, Store_Name

Explanation:
This query shows total sales by product and store, grouped by both `Product_Code` and `Store_Name`.

Result:
- **Prod316 (Brick & Mortar)**: ₹52,454,180
- **Prod318 (E-Commerce)**: ₹39,895,335

---

### 10. **Sales by Market and Store**
Query:
SELECT Market_Code, Store_Name, SUM(Sales_Amount) AS Total_Sales
FROM Transaction
JOIN Customer ON Transaction.Customer_Code = Customer.Customer_Code
GROUP BY Market_Code, Store_Name

Explanation:
This query shows the total sales for each combination of market and store.

Result:
- **Brick & Mortar (Mark004)**: ₹484,021,050
- **E-Commerce (Mark002)**: ₹84,954,463
